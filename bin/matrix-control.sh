#!/bin/bash
# ===================================================================================
# Matrix Synapse Control Script
# –í–µ—Ä—Å—ñ—è: 4.0 - –ó –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Docker Compose —Ç–∞ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö –æ–±—Ä–∞–∑—ñ–≤
# ===================================================================================

# --- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ---
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly BASE_DIR="$(dirname "${SCRIPT_DIR}")"
readonly CONFIG_FILE="${BASE_DIR}/config.conf"
readonly LOG_FILE="${BASE_DIR}/matrix-control.log"

# --- –Ü–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—ñ–≤ ---
source "${BASE_DIR}/lib/common.sh"
source "${BASE_DIR}/lib/logger.sh"
source "${BASE_DIR}/lib/error-handler.sh"
source "${BASE_DIR}/lib/env-config.sh"

# --- –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ---
# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
load_env_config

# --- –§—É–Ω–∫—Ü—ñ—ó ---
show_help() {
    cat << 'EOF'
üöÄ Matrix Synapse Control Script v4.0

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
  ./matrix-control.sh [–∫–æ–º–∞–Ω–¥–∞] [–æ–ø—Ü—ñ—ó]

–ö–æ–º–∞–Ω–¥–∏:
  start                    –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏
  stop                     –ó—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏
  restart                  –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏
  status                   –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤—ñ—Å—ñ–≤
  logs [—Å–µ—Ä–≤—ñ—Å]           –ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏ —Å–µ—Ä–≤—ñ—Å—É
  update                   –û–Ω–æ–≤–∏—Ç–∏ –æ–±—Ä–∞–∑–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
  backup                   –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é
  restore [—Ñ–∞–π–ª]          –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó
  config                   –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
  shell [—Å–µ—Ä–≤—ñ—Å]          –í—ñ–¥–∫—Ä–∏—Ç–∏ shell –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ
  portainer               –ó–∞–ø—É—Å—Ç–∏—Ç–∏ Portainer
  monitoring              –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
  bridges                  –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ—Å—Ç–∏
  element                  –ó–∞–ø—É—Å—Ç–∏—Ç–∏ Element Web
  cloudflare              –ó–∞–ø—É—Å—Ç–∏—Ç–∏ Cloudflare Tunnel

–°–µ—Ä–≤—ñ—Å–∏:
  postgres                 PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–∏—Ö
  redis                    Redis –∫–µ—à
  synapse                  Matrix Synapse
  nginx                    Nginx –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
  element                  Element Web –∫–ª—ñ—î–Ω—Ç
  cloudflared              Cloudflare Tunnel
  prometheus               Prometheus –º–µ—Ç—Ä–∏–∫–∏
  grafana                  Grafana –¥–∞—à–±–æ—Ä–¥–∏
  node-exporter            Node Exporter
  loki                     Loki –ª–æ–≥–∏
  promtail                 Promtail –∑–±—ñ—Ä –ª–æ–≥—ñ–≤
  signal-bridge            Signal Bridge
  whatsapp-bridge          WhatsApp Bridge
  discord-bridge           Discord Bridge
  portainer                Portainer —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è

–ü—Ä–∏–∫–ª–∞–¥–∏:
  ./matrix-control.sh start
  ./matrix-control.sh logs synapse
  ./matrix-control.sh shell postgres
  ./matrix-control.sh backup
  ./matrix-control.sh monitoring
  ./matrix-control.sh bridges

–ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:
  MATRIX_DOMAIN                    –î–æ–º–µ–Ω –¥–ª—è Matrix —Å–µ—Ä–≤–µ—Ä–∞
  MATRIX_BASE_DIR                  –ë–∞–∑–æ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è
  MATRIX_POSTGRES_PASSWORD         –ü–∞—Ä–æ–ª—å PostgreSQL
  MATRIX_USE_CLOUDFLARE_TUNNEL     –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Cloudflare Tunnel
  MATRIX_CLOUDFLARE_TUNNEL_TOKEN   –¢–æ–∫–µ–Ω Cloudflare Tunnel
  MATRIX_SETUP_MONITORING          –£–≤—ñ–º–∫–Ω—É—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
  MATRIX_INSTALL_BRIDGES           –£–≤—ñ–º–∫–Ω—É—Ç–∏ –º–æ—Å—Ç–∏
EOF
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—ñ–≤
start_services() {
    log_step "–ó–∞–ø—É—Å–∫ Matrix —Å–µ—Ä–≤—ñ—Å—ñ–≤"
    
    cd "${BASE_DIR}"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î docker-compose.yml
    if [[ ! -f "docker-compose.yml" ]]; then
        log_error "–§–∞–π–ª docker-compose.yml –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        log_info "–°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è: ./install.sh"
        return 1
    fi
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏
    log_info "–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    if ! docker compose up -d postgres redis synapse nginx; then
        log_error "–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –æ—Å–Ω–æ–≤–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤"
        return 1
    fi
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Å–µ—Ä–≤—ñ—Å–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    if [[ "${USE_CLOUDFLARE_TUNNEL}" == "true" ]]; then
        log_info "–ó–∞–ø—É—Å–∫ Cloudflare Tunnel..."
        docker compose --profile cloudflare up -d cloudflared
    fi
    
    if [[ "${SETUP_MONITORING}" == "true" ]]; then
        log_info "–ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É..."
        docker compose --profile monitoring up -d prometheus grafana node-exporter loki promtail
    fi
    
    if [[ "${INSTALL_BRIDGES}" == "true" ]]; then
        log_info "–ó–∞–ø—É—Å–∫ –º–æ—Å—Ç—ñ–≤..."
        docker compose --profile bridges up -d
    fi
    
    if [[ "${INSTALL_ELEMENT}" == "true" ]]; then
        log_info "–ó–∞–ø—É—Å–∫ Element Web..."
        docker compose --profile element up -d element
    fi
    
    log_success "–í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –∑–∞–ø—É—â–µ–Ω–æ"
    show_status
}

# –ó—É–ø–∏–Ω–∫–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤
stop_services() {
    log_step "–ó—É–ø–∏–Ω–∫–∞ Matrix —Å–µ—Ä–≤—ñ—Å—ñ–≤"
    
    cd "${BASE_DIR}"
    
    if [[ ! -f "docker-compose.yml" ]]; then
        log_error "–§–∞–π–ª docker-compose.yml –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        return 1
    fi
    
    # –ó—É–ø–∏–Ω—è—î–º–æ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏
    if docker compose down; then
        log_success "–í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –∑—É–ø–∏–Ω–µ–Ω–æ"
    else
        log_error "–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ —Å–µ—Ä–≤—ñ—Å—ñ–≤"
        return 1
    fi
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—ñ–≤
restart_services() {
    log_step "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Matrix —Å–µ—Ä–≤—ñ—Å—ñ–≤"
    
    stop_services
    sleep 2
    start_services
}

# –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å—É
show_status() {
    log_step "–°—Ç–∞—Ç—É—Å Matrix —Å–µ—Ä–≤—ñ—Å—ñ–≤"
    
    cd "${BASE_DIR}"
    
    if [[ ! -f "docker-compose.yml" ]]; then
        log_error "–§–∞–π–ª docker-compose.yml –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        return 1
    fi
    
    echo
    echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:"
    docker compose ps
    
    echo
    echo "üåê –î–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏:"
    echo "   Matrix Synapse: http://${DOMAIN}:8008"
    echo "   Element Web: https://${DOMAIN}"
    echo "   Nginx: http://${DOMAIN}"
    
    if [[ "${SETUP_MONITORING}" == "true" ]]; then
        echo "   Grafana: http://localhost:3000"
        echo "   Prometheus: http://localhost:9090"
        echo "   Loki: http://localhost:3100"
    fi
    
    if [[ "${USE_CLOUDFLARE_TUNNEL}" == "true" ]]; then
        echo "   Cloudflare Tunnel: –∞–∫—Ç–∏–≤–Ω–∏–π"
    fi
    
    echo
    echo "üíæ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–∏—Å–∫—É:"
    docker system df
    
    echo
    echo "üìà –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"
}

# –ü–æ–∫–∞–∑ –ª–æ–≥—ñ–≤
show_logs() {
    local service="${1:-}"
    
    cd "${BASE_DIR}"
    
    if [[ ! -f "docker-compose.yml" ]]; then
        log_error "–§–∞–π–ª docker-compose.yml –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        return 1
    fi
    
    if [[ -z "${service}" ]]; then
        log_info "–ü–æ–∫–∞–∑ –ª–æ–≥—ñ–≤ –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
        docker compose logs -f
    else
        log_info "–ü–æ–∫–∞–∑ –ª–æ–≥—ñ–≤ —Å–µ—Ä–≤—ñ—Å—É: ${service}"
        docker compose logs -f "${service}"
    fi
}

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–∞–∑—ñ–≤
update_images() {
    log_step "–û–Ω–æ–≤–ª–µ–Ω–Ω—è Docker –æ–±—Ä–∞–∑—ñ–≤"
    
    cd "${BASE_DIR}"
    
    if [[ ! -f "docker-compose.yml" ]]; then
        log_error "–§–∞–π–ª docker-compose.yml –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        return 1
    fi
    
    # –ó—É–ø–∏–Ω—è—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏
    log_info "–ó—É–ø–∏–Ω–∫–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è..."
    docker compose down
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–∞–∑–∏
    log_info "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –æ–±—Ä–∞–∑—ñ–≤..."
    if ! docker compose pull; then
        log_error "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±—Ä–∞–∑—ñ–≤"
        return 1
    fi
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏ –∑ –Ω–æ–≤–∏–º–∏ –æ–±—Ä–∞–∑–∞–º–∏
    log_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—ñ–≤ –∑ –Ω–æ–≤–∏–º–∏ –æ–±—Ä–∞–∑–∞–º–∏..."
    start_services
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –æ–±—Ä–∞–∑–∏
    log_info "–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –æ–±—Ä–∞–∑—ñ–≤..."
    docker image prune -f
    
    log_success "–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
create_backup() {
    log_step "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó"
    
    cd "${BASE_DIR}"
    
    local backup_dir="${BASE_DIR}/backups"
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local backup_file="${backup_dir}/matrix_backup_${timestamp}.tar.gz"
    
    mkdir -p "${backup_dir}"
    
    # –ó—É–ø–∏–Ω—è—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
    log_info "–ó—É–ø–∏–Ω–∫–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è..."
    docker compose stop
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é
    log_info "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É..."
    tar -czf "${backup_file}" \
        --exclude='backups' \
        --exclude='*.log' \
        --exclude='.git' \
        .
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏
    log_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    docker compose start
    
    if [[ -f "${backup_file}" ]]; then
        local size=$(du -h "${backup_file}" | cut -f1)
        log_success "–†–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${backup_file} (${size})"
    else
        log_error "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó"
        return 1
    fi
}

# –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó
restore_backup() {
    local backup_file="${1:-}"
    
    if [[ -z "${backup_file}" ]]; then
        log_error "–í–∫–∞–∂—ñ—Ç—å —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó"
        log_info "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ./matrix-control.sh restore <—Ñ–∞–π–ª>"
        return 1
    fi
    
    if [[ ! -f "${backup_file}" ]]; then
        log_error "–§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${backup_file}"
        return 1
    fi
    
    log_step "–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó"
    
    cd "${BASE_DIR}"
    
    # –ó—É–ø–∏–Ω—è—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏
    log_info "–ó—É–ø–∏–Ω–∫–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    docker compose down
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –ø–æ—Ç–æ—á–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    mv . .backup_${timestamp}
    
    # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∑ –∞—Ä—Ö—ñ–≤—É
    log_info "–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –∞—Ä—Ö—ñ–≤—É..."
    tar -xzf "${backup_file}" -C .
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏
    log_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    start_services
    
    log_success "–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –ü–æ–∫–∞–∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
show_config() {
    log_step "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Matrix Synapse"
    
    echo "üåê –î–æ–º–µ–Ω: ${DOMAIN}"
    echo "üìÅ –ë–∞–∑–æ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: ${BASE_DIR}"
    echo "üîê –ü—É–±–ª—ñ—á–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: ${ALLOW_PUBLIC_REGISTRATION}"
    echo "üåç –§–µ–¥–µ—Ä–∞—Ü—ñ—è: ${ENABLE_FEDERATION}"
    echo "üì± Element Web: ${INSTALL_ELEMENT}"
    echo "üåâ –ú–æ—Å—Ç–∏: ${INSTALL_BRIDGES}"
    echo "üìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: ${SETUP_MONITORING}"
    echo "‚òÅÔ∏è Cloudflare Tunnel: ${USE_CLOUDFLARE_TUNNEL}"
    echo "üíæ –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è: ${SETUP_BACKUP}"
    
    if [[ "${INSTALL_BRIDGES}" == "true" ]]; then
        echo
        echo "üåâ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –º–æ—Å—Ç–∏:"
        [[ "${INSTALL_SIGNAL_BRIDGE:-false}" == "true" ]] && echo "  üì± Signal Bridge"
        [[ "${INSTALL_WHATSAPP_BRIDGE:-false}" == "true" ]] && echo "  üí¨ WhatsApp Bridge"
        [[ "${INSTALL_DISCORD_BRIDGE:-false}" == "true" ]] && echo "  üéÆ Discord Bridge"
    fi
}

# –í—ñ–¥–∫—Ä–∏—Ç—Ç—è shell –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ
open_shell() {
    local service="${1:-}"
    
    if [[ -z "${service}" ]]; then
        log_error "–í–∫–∞–∂—ñ—Ç—å —Å–µ—Ä–≤—ñ—Å –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è shell"
        log_info "–î–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏: postgres, redis, synapse, nginx, element"
        return 1
    fi
    
    cd "${BASE_DIR}"
    
    if [[ ! -f "docker-compose.yml" ]]; then
        log_error "–§–∞–π–ª docker-compose.yml –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        return 1
    fi
    
    log_info "–í—ñ–¥–∫—Ä–∏—Ç—Ç—è shell –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ: ${service}"
    docker compose exec "${service}" /bin/bash
}

# –ó–∞–ø—É—Å–∫ Portainer
start_portainer() {
    log_step "–ó–∞–ø—É—Å–∫ Portainer"
    
    cd "${BASE_DIR}"
    
    if [[ ! -f "docker-compose.yml" ]]; then
        log_error "–§–∞–π–ª docker-compose.yml –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        return 1
    fi
    
    log_info "–ó–∞–ø—É—Å–∫ Portainer..."
    docker compose --profile portainer up -d portainer
    
    log_success "Portainer –∑–∞–ø—É—â–µ–Ω–æ"
    echo "üåê Portainer –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑–∞ –∞–¥—Ä–µ—Å–æ—é: http://localhost:9000"
}

# –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
start_monitoring() {
    log_step "–ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"
    
    cd "${BASE_DIR}"
    
    if [[ ! -f "docker-compose.yml" ]]; then
        log_error "–§–∞–π–ª docker-compose.yml –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        return 1
    fi
    
    log_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—ñ–≤ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É..."
    docker compose --profile monitoring up -d prometheus grafana node-exporter loki promtail
    
    log_success "–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ"
    echo "üìä Grafana: http://localhost:3000"
    echo "üìà Prometheus: http://localhost:9090"
    echo "üìã Loki: http://localhost:3100"
}

# –ó–∞–ø—É—Å–∫ –º–æ—Å—Ç—ñ–≤
start_bridges() {
    log_step "–ó–∞–ø—É—Å–∫ –º–æ—Å—Ç—ñ–≤"
    
    cd "${BASE_DIR}"
    
    if [[ ! -f "docker-compose.yml" ]]; then
        log_error "–§–∞–π–ª docker-compose.yml –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        return 1
    fi
    
    log_info "–ó–∞–ø—É—Å–∫ –º–æ—Å—Ç—ñ–≤..."
    docker compose --profile bridges up -d
    
    log_success "–ú–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω–æ"
    echo "üåâ –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ—Å—Ç–∏:"
    [[ "${INSTALL_SIGNAL_BRIDGE:-false}" == "true" ]] && echo "  üì± Signal Bridge: http://localhost:29328"
    [[ "${INSTALL_WHATSAPP_BRIDGE:-false}" == "true" ]] && echo "  üí¨ WhatsApp Bridge: http://localhost:29318"
    [[ "${INSTALL_DISCORD_BRIDGE:-false}" == "true" ]] && echo "  üéÆ Discord Bridge: http://localhost:29334"
}

# –ó–∞–ø—É—Å–∫ Element Web
start_element() {
    log_step "–ó–∞–ø—É—Å–∫ Element Web"
    
    cd "${BASE_DIR}"
    
    if [[ ! -f "docker-compose.yml" ]]; then
        log_error "–§–∞–π–ª docker-compose.yml –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        return 1
    fi
    
    log_info "–ó–∞–ø—É—Å–∫ Element Web..."
    docker compose --profile element up -d element
    
    log_success "Element Web –∑–∞–ø—É—â–µ–Ω–æ"
    echo "üåê Element Web –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑–∞ –∞–¥—Ä–µ—Å–æ—é: https://${DOMAIN}"
}

# –ó–∞–ø—É—Å–∫ Cloudflare Tunnel
start_cloudflare() {
    log_step "–ó–∞–ø—É—Å–∫ Cloudflare Tunnel"
    
    cd "${BASE_DIR}"
    
    if [[ ! -f "docker-compose.yml" ]]; then
        log_error "–§–∞–π–ª docker-compose.yml –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        return 1
    fi
    
    if [[ "${USE_CLOUDFLARE_TUNNEL}" != "true" ]]; then
        log_error "Cloudflare Tunnel –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
        return 1
    fi
    
    log_info "–ó–∞–ø—É—Å–∫ Cloudflare Tunnel..."
    docker compose --profile cloudflare up -d cloudflared
    
    log_success "Cloudflare Tunnel –∑–∞–ø—É—â–µ–Ω–æ"
    echo "‚òÅÔ∏è Cloudflare Tunnel –∞–∫—Ç–∏–≤–Ω–∏–π"
}

# --- –ì–æ–ª–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ ---
main() {
    local command="${1:-}"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π Docker
    if ! docker info > /dev/null 2>&1; then
        log_error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
        exit 1
    fi
    
    case "${command}" in
        start)
            start_services
            ;;
        stop)
            stop_services
            ;;
        restart)
            restart_services
            ;;
        status)
            show_status
            ;;
        logs)
            show_logs "${2:-}"
            ;;
        update)
            update_images
            ;;
        backup)
            create_backup
            ;;
        restore)
            restore_backup "${2:-}"
            ;;
        config)
            show_config
            ;;
        shell)
            open_shell "${2:-}"
            ;;
        portainer)
            start_portainer
            ;;
        monitoring)
            start_monitoring
            ;;
        bridges)
            start_bridges
            ;;
        element)
            start_element
            ;;
        cloudflare)
            start_cloudflare
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            log_error "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: ${command}"
            echo
            show_help
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"
