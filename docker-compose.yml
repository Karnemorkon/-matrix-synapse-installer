# ===================================================================================
# Matrix Synapse Installer - Docker Compose Configuration
# Версія: 4.0 - З офіційними образами контейнерів
# ===================================================================================

version: '3.8'

services:
  # PostgreSQL база даних
  postgres:
    image: postgres:15-alpine
    container_name: matrix-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: matrix
      POSTGRES_USER: matrix
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    networks:
      - matrix-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U matrix -d matrix"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis для кешування
  redis:
    image: redis:7-alpine
    container_name: matrix-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - matrix-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Matrix Synapse
  synapse:
    image: matrixdotorg/synapse:latest
    container_name: matrix-synapse
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - synapse_data:/data
      - ./synapse/config:/data:ro
    environment:
      - SYNAPSE_SERVER_NAME=${DOMAIN}
      - SYNAPSE_REPORT_STATS=no
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - matrix-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8008/_matrix/client/versions || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx для веб-сервера
  nginx:
    image: nginx:alpine
    container_name: matrix-nginx
    restart: unless-stopped
    depends_on:
      - synapse
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./element:/usr/share/nginx/html:ro
      - ./web/dashboard:/usr/share/nginx/dashboard:ro
    networks:
      - matrix-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Element Web клієнт
  element:
    image: nginx:alpine
    container_name: matrix-element
    restart: unless-stopped
    volumes:
      - ./element:/usr/share/nginx/html:ro
    networks:
      - matrix-network
    profiles:
      - element

  # Cloudflare Tunnel
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: matrix-cloudflared
    restart: unless-stopped
    command: tunnel run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - matrix-network
    profiles:
      - cloudflare

  # Prometheus для моніторингу
  prometheus:
    image: prom/prometheus:latest
    container_name: matrix-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - matrix-network
    profiles:
      - monitoring

  # Grafana для дашбордів
  grafana:
    image: grafana/grafana:latest
    container_name: matrix-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - matrix-network
    profiles:
      - monitoring

  # Node Exporter для системних метрик
  node-exporter:
    image: prom/node-exporter:latest
    container_name: matrix-node-exporter
    restart: unless-stopped
    command:
      - '--path.rootfs=/host'
    network_mode: host
    pid: host
    volumes:
      - '/:/host:ro,rslave'
    profiles:
      - monitoring

  # Signal Bridge
  signal-bridge:
    image: dock.mau.dev/mautrix/signal:latest
    container_name: matrix-signal-bridge
    restart: unless-stopped
    depends_on:
      synapse:
        condition: service_healthy
    volumes:
      - ./bridges/signal/config:/data
      - ./bridges/signal/data:/signald/data
    environment:
      - MAUTRIX_SIGNAL_CONFIG_PATH=/data/config.yaml
    ports:
      - "29328:29328"
    networks:
      - matrix-network
    profiles:
      - bridges

  # WhatsApp Bridge
  whatsapp-bridge:
    image: dock.mau.dev/mautrix/whatsapp:latest
    container_name: matrix-whatsapp-bridge
    restart: unless-stopped
    depends_on:
      synapse:
        condition: service_healthy
    volumes:
      - ./bridges/whatsapp/config:/data
    environment:
      - MAUTRIX_WHATSAPP_CONFIG_PATH=/data/config.yaml
    ports:
      - "29318:29318"
    networks:
      - matrix-network
    profiles:
      - bridges

  # Discord Bridge
  discord-bridge:
    image: dock.mau.dev/mautrix/discord:latest
    container_name: matrix-discord-bridge
    restart: unless-stopped
    depends_on:
      synapse:
        condition: service_healthy
    volumes:
      - ./bridges/discord/config:/data
    environment:
      - MAUTRIX_DISCORD_CONFIG_PATH=/data/config.yaml
    ports:
      - "29334:29334"
    networks:
      - matrix-network
    profiles:
      - bridges

  # Portainer для управління контейнерами
  portainer:
    image: portainer/portainer-ce:latest
    container_name: matrix-portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - matrix-network
    profiles:
      - portainer

  # Loki для логів
  loki:
    image: grafana/loki:latest
    container_name: matrix-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
      - ./monitoring/loki:/etc/loki:ro
    ports:
      - "3100:3100"
    networks:
      - matrix-network
    profiles:
      - monitoring

  # Promtail для збору логів
  promtail:
    image: grafana/promtail:latest
    container_name: matrix-promtail
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail:/etc/promtail:ro
      - /var/log:/var/log:ro
    networks:
      - matrix-network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  synapse_data:
  prometheus_data:
  grafana_data:
  portainer_data:
  loki_data:

networks:
  matrix-network:
    driver: bridge 