#!/bin/bash
# ===================================================================================
# Matrix Module - Matrix Synapse specific configuration
# ===================================================================================

# --- Functions ---
generate_synapse_config() {
    log_step "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó Synapse"
    
    local config_dir="${BASE_DIR}/synapse/config"
    
    # Generate initial config
    log_info "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó..."
    docker run --rm \
        -v "${config_dir}:/data" \
        -e SYNAPSE_SERVER_NAME="${DOMAIN}" \
        -e SYNAPSE_REPORT_STATS=no \
        matrixdotorg/synapse:latest generate &>> "${LOG_FILE}"
    
    # Set proper permissions
    chown -R 991:991 "${config_dir}"
    chmod 600 "${config_dir}/homeserver.yaml"
    
    # Configure database
    configure_database
    
    # Configure registration and federation
    configure_registration_and_federation
    
    log_success "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é Synapse —Å—Ç–≤–æ—Ä–µ–Ω–æ"
}

configure_database() {
    log_info "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö..."
    
    local homeserver_config="${BASE_DIR}/synapse/config/homeserver.yaml"
    
    # Replace SQLite with PostgreSQL configuration
    cat >> "${homeserver_config}" << EOF

# Database configuration
database:
  name: psycopg2
  args:
    user: matrix_user
    password: ${POSTGRES_PASSWORD}
    database: matrix_db
    host: postgres
    port: 5432
    cp_min: 5
    cp_max: 10
EOF
}

configure_registration_and_federation() {
    log_info "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ —Ñ–µ–¥–µ—Ä–∞—Ü—ñ—ó..."
    
    local homeserver_config="${BASE_DIR}/synapse/config/homeserver.yaml"
    
    # Configure registration
    if [[ "${ALLOW_PUBLIC_REGISTRATION}" == "true" ]]; then
        sed -i "s|enable_registration: false|enable_registration: true|" "${homeserver_config}"
    fi
    
    # Configure federation
    if [[ "${ENABLE_FEDERATION}" == "false" ]]; then
        echo "federation_enabled: false" >> "${homeserver_config}"
    fi
    
    # Add metrics configuration
    cat >> "${homeserver_config}" << EOF

# Metrics configuration
enable_metrics: true
metrics_port: 9000
EOF
}

generate_element_config() {
    if [[ "${INSTALL_ELEMENT}" != "true" ]]; then
        return 0
    fi
    
    log_step "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Element Web"
    
    cat > "${BASE_DIR}/element/config.json" << EOF
{
    "default_server_name": "${DOMAIN}",
    "default_server_config": {
        "m.homeserver": {
            "base_url": "https://${DOMAIN}",
            "server_name": "${DOMAIN}"
        },
        "m.identity_server": {
            "base_url": "https://vector.im"
        }
    },
    "default_identity_server": "https://vector.im",
    "disable_custom_homeserver": false,
    "show_labs_settings": true,
    "brand": "Matrix (${DOMAIN})"
}
EOF
    
    log_success "Element Web –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
}

post_installation_setup() {
    log_step "–ü–æ—Å—Ç-—ñ–Ω—Å—Ç–∞–ª—è—Ü—ñ–π–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"
    
    # Generate Element config
    generate_element_config
    
    # Create management script
    create_management_script
    
    # Create documentation
    create_local_documentation
    
    log_success "–ü–æ—Å—Ç-—ñ–Ω—Å—Ç–∞–ª—è—Ü—ñ–π–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

create_management_script() {
    log_info "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è..."
    
    cat > "${BASE_DIR}/bin/matrix-control.sh" << 'EOF'
#!/bin/bash
# Matrix Synapse Control Script

MATRIX_DIR="$(dirname "$(dirname "$0")")"
cd "$MATRIX_DIR"

show_usage() {
    cat << USAGE
Matrix Synapse Control Script

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 <–∫–æ–º–∞–Ω–¥–∞> [–ø–∞—Ä–∞–º–µ—Ç—Ä–∏]

–ö–æ–º–∞–Ω–¥–∏:
  start                    –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏
  stop                     –ó—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏
  restart                  –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏
  status                   –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤—ñ—Å—ñ–≤
  logs [service]           –ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏ (–≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –∞–±–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ)
  update                   –û–Ω–æ–≤–∏—Ç–∏ Docker –æ–±—Ä–∞–∑–∏
  health                   –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏
  backup                   –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é
  user create <username>   –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  user list               –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

–ü—Ä–∏–∫–ª–∞–¥–∏:
  $0 start
  $0 logs synapse
  $0 user create admin
USAGE
}

case "$1" in
    start)
        echo "üöÄ –ó–∞–ø—É—Å–∫ Matrix —Å–∏—Å—Ç–µ–º–∏..."
        docker compose up -d
        ;;
    stop)
        echo "üõë –ó—É–ø–∏–Ω–∫–∞ Matrix —Å–∏—Å—Ç–µ–º–∏..."
        docker compose down
        ;;
    restart)
        echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Matrix —Å–∏—Å—Ç–µ–º–∏..."
        docker compose restart
        ;;
    status)
        echo "üìä –°—Ç–∞—Ç—É—Å Matrix —Å–∏—Å—Ç–µ–º–∏:"
        docker compose ps
        ;;
    logs)
        if [ -n "$2" ]; then
            echo "üìã –õ–æ–≥–∏ —Å–µ—Ä–≤—ñ—Å—É $2:"
            docker compose logs -f "$2"
        else
            echo "üìã –õ–æ–≥–∏ –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤:"
            docker compose logs -f
        fi
        ;;
    update)
        echo "‚¨ÜÔ∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è Docker –æ–±—Ä–∞–∑—ñ–≤..."
        docker compose pull
        echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑ –Ω–æ–≤–∏–º–∏ –æ–±—Ä–∞–∑–∞–º–∏..."
        docker compose up -d
        ;;
    health)
        echo "üè• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏:"
        echo -n "Synapse API: "
        if curl -sf http://localhost:8008/_matrix/client/versions > /dev/null; then
            echo "‚úÖ OK"
        else
            echo "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
        fi
        
        echo -n "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: "
        if docker compose exec -T postgres pg_isready -U matrix_user > /dev/null 2>&1; then
            echo "‚úÖ OK"
        else
            echo "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        fi
        ;;
    backup)
        if [ -f "/DATA/matrix-backups/backup-matrix.sh" ]; then
            echo "üíæ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó..."
            /DATA/matrix-backups/backup-matrix.sh
        else
            echo "‚ùå –°–∫—Ä–∏–ø—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        fi
        ;;
    user)
        case "$2" in
            create)
                if [ -z "$3" ]; then
                    echo "‚ùå –í–∫–∞–∂—ñ—Ç—å —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
                    echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 user create <username>"
                    exit 1
                fi
                echo "üë§ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ $3..."
                docker compose exec synapse register_new_matrix_user \
                    -c /data/homeserver.yaml \
                    -u "$3" \
                    -a \
                    http://localhost:8008
                ;;
            list)
                echo "üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:"
                docker compose exec postgres psql -U matrix_user -d matrix_db \
                    -c "SELECT name, admin, deactivated FROM users ORDER BY name;"
                ;;
            *)
                echo "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: $2"
                echo "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏: create, list"
                ;;
        esac
        ;;
    *)
        show_usage
        exit 1
        ;;
esac
EOF
    
    chmod +x "${BASE_DIR}/bin/matrix-control.sh"
    log_success "–°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ"
}

create_local_documentation() {
    log_info "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó..."
    
    cat > "${BASE_DIR}/docs/README.md" << EOF
# Matrix Synapse Installation

## –î–æ—Å—Ç—É–ø –¥–æ —Å–µ—Ä–≤—ñ—Å—ñ–≤

- **Matrix Synapse**: http://localhost:8008
- **Synapse Admin**: http://localhost:8080
$(if [[ "${INSTALL_ELEMENT}" == "true" ]]; then echo "- **Element Web**: http://localhost:80"; fi)
$(if [[ "${SETUP_MONITORING}" == "true" ]]; then echo "- **Grafana**: http://localhost:3000 (admin/admin123)"; echo "- **Prometheus**: http://localhost:9090"; fi)
$(if [[ "${USE_CLOUDFLARE_TUNNEL}" == "true" ]]; then echo "- **Cloudflare Tunnel**: –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—é –≤ –ø–∞–Ω–µ–ª—ñ Cloudflare"; fi)

## –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–æ—é

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:

\`\`\`bash
# –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏
./bin/matrix-control.sh status

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
./bin/matrix-control.sh restart

# –õ–æ–≥–∏
./bin/matrix-control.sh logs

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
./bin/matrix-control.sh user create admin
\`\`\`

## –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

\`\`\`bash
cd ${BASE_DIR}
docker compose exec synapse register_new_matrix_user \\
    -c /data/homeserver.yaml \\
    -a \\
    -u admin \\
    -p your_password \\
    http://localhost:8008
\`\`\`

## –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è

- –î–æ–º–µ–Ω: ${DOMAIN}
- –ü—É–±–ª—ñ—á–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: ${ALLOW_PUBLIC_REGISTRATION}
- –§–µ–¥–µ—Ä–∞—Ü—ñ—è: ${ENABLE_FEDERATION}
- Element Web: ${INSTALL_ELEMENT}
- –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: ${SETUP_MONITORING}
- Cloudflare Tunnel: ${USE_CLOUDFLARE_TUNNEL}
EOF
    
    log_success "–õ–æ–∫–∞–ª—å–Ω—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ"
}

get_service_urls() {
    echo "Matrix Synapse: http://localhost:8008"
    echo "Synapse Admin: http://localhost:8080"
    
    if [[ "${INSTALL_ELEMENT}" == "true" ]]; then
        echo "Element Web: http://localhost:80"
    fi
    
    if [[ "${SETUP_MONITORING}" == "true" ]]; then
        echo "Grafana: http://localhost:3000 (admin/admin123)"
        echo "Prometheus: http://localhost:9090"
    fi
    
    if [[ "${USE_CLOUDFLARE_TUNNEL}" == "true" ]]; then
        echo "Cloudflare Tunnel: –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—é –≤ –ø–∞–Ω–µ–ª—ñ Cloudflare"
    fi
}

# Export functions
export -f generate_synapse_config configure_database configure_registration_and_federation
export -f generate_element_config post_installation_setup create_management_script
export -f create_local_documentation get_service_urls
